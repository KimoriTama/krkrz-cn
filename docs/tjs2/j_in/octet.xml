<?xml version="1.0" encoding="Shift_JIS" ?>
<doc>
<title>オクテット列に対する操作</title>

<para>
<ptitle>オクテット列に対する操作</ptitle>
　TJS2 では、オクテット列は擬似的に <kw>Octet</kw> クラスのオブジェクトということになっていますが、Octet クラスは存在していませんし、実際に Octet クラスのオブジェクトというわけではありません ( ただし オクテット列に対して typeof 演算子を使うと "Octet" を返します )。<r/>
　しかし オクテット列をオブジェクトと見立てて、いくつかのメソッドやプロパティが使用可能になっています。<r/>
<r/>
　オクテット列に関する実装は未完成です。<r/>
</para>

<para>
<ptitle>length</ptitle>
　length プロパティは、オクテット列の長さを返します。メソッドではなくてプロパティですので注意してください。ただし、このプロパティへの値の代入はできません。<r/>
<r/>
<example>
	var oct = &lt;% 11 22 33 %>;<r/>
	var n = oct.length;  // n には 3 が代入される<r/>
	var n = &lt;% 11 22 33 %>.length; // これも同じく 3 が代入される<r/>
</example>
</para>

<para>
<ptitle>'数値' プロパティ</ptitle>
　数値をプロパティとして間接指定すると、その位置にあるオクテットにアクセスできます。<r/>
　結果はオクテットの数値で表されます。<r/>
　たとえば、oct がオクテット列を表す式だとすると、oct[0] は先頭のオクテットの値を表す数値になります。<r/>
　数値がオクテット列よりも長い位置や、負の場合は例外が発生します。<r/>
<r/>
　代入式を生成することはできません。<r/>
<example>
	var oct = &lt;% 11 22 33 44 55 %>;<r/>
	var c = oct[0];  // 0x11 が c に代入される<r/>
	var c = oct[2];  // 0x22 が c に代入される<r/>
	oct[3] = 'A'; // 代入式は生成できないのでエラーになる<r/>
	var c = oct[100]; // 値が範囲外なのでエラーになる<r/>
</example>
</para>

<para>
<ptitle>unpack</ptitle>
　unpack メソッドは、引数で指定された文字列に従い、バイナリ(Octet)を配列(Array)化して返します。<r/>
　指定の文字列はテンプレートと呼びます。<r/>
　テンプレートは、型指定文字とその長さを並べたものです。長さとして * が指定された時は残り全ての長さを表します。長さが省略された場合は1として扱います。<r/>
<bq>
構文 : unpack(テンプレート文字列)<r/>
</bq>
テンプレート文字列には以下の文字が使用可能です。<r/>
　a : ASCII 文字列(ヌル文字が補完される)<r/>
　A : ASCII 文字列(スペースが補完される)<r/>
　b : 2進数文字列(下位ビットから上位ビットの順)<r/>
　B : 2進数文字列(上位ビットから下位ビットの順)<r/>
　c : 符号付き1バイト数値(-128 〜 127)<r/>
　C : 符号無し1バイト数値(0〜255)<r/>
　d : 倍精度浮動小数点値<r/>
　f : 単精度浮動小数点値<r/>
　h : 16進数文字列(low nybble first)<r/>
　H : 16進数文字列(high nybble first)<r/>
　i : 符号付きint数値(通常4バイト)<r/>
　I : 符号無しint数値(通常4バイト)<r/>
　l : 符号付きlong数値(通常4バイト)<r/>
　L : 符号無しlong数値(通常4バイト)<r/>
　n : 符号無しshort数値(ネットワークバイトオーダ)<r/>
　N : 符号無しlong数値(ネットワークバイトオーダ)<r/>
　s : 符号付きshort数値(通常2バイト)<r/>
　S : 符号無しshort数値(通常2バイト)<r/>
　v : 符号無しshort値(リトルエンディアン)<r/>
　V : 符号無しlong値(リトルエンディアン)<r/>
　x : 1バイト読み飛ばす<r/>
　X : 1バイト後退<r/>
　@ : 指定位置まで移動<r/>
　m : Base64 encode<r/>
<example>
	var array = octet.unpack("a4i2");<r/>
</example>
　この例ではoctetの最初4バイトをASCII文字であるとみなし4文字の文字列を配列の0番目に出力します。<r/>
　次に8バイトを32ビット符号付き整数2個として、配列の1番目と2番目に出力します。<r/>
　つまり、array[0]に"xxxx"と言った文字列、array[1]とarray[2]に整数が出力されます。<r/>
</para>



</doc>
